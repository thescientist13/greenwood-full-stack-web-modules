diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index 8aa6f56..7b99776 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -3,6 +3,7 @@ import path from 'path';
 import { checkResourceExists, normalizePathnameForWindows } from '../lib/resource-utils.js';
 import { nodeResolve } from '@rollup/plugin-node-resolve';
 import commonjs from '@rollup/plugin-commonjs';
+import { importAttributes } from 'acorn-import-attributes';
 import * as walk from 'acorn-walk';
 
 // https://github.com/rollup/rollup/issues/2121
@@ -315,6 +316,9 @@ const getRollupConfigForScriptResources = async (compilation) => {
       chunkFileNames: '[name].[hash].js',
       sourcemap: true
     },
+    acornInjectPlugins: [
+      importAttributes
+    ],
     plugins: [
       greenwoodResourceLoader(compilation),
       greenwoodSyncPageResourceBundlesPlugin(compilation),
diff --git a/node_modules/@greenwood/cli/src/loader.js b/node_modules/@greenwood/cli/src/loader.js
index 238fefc..c72ed67 100644
--- a/node_modules/@greenwood/cli/src/loader.js
+++ b/node_modules/@greenwood/cli/src/loader.js
@@ -2,10 +2,16 @@ import fs from 'fs/promises';
 import { readAndMergeConfig as initConfig } from './lifecycles/config.js';
 
 const config = await initConfig();
-const resourcePlugins = config.plugins.filter(plugin => plugin.type === 'resource' && !plugin.isGreenwoodDefaultPlugin).map(plugin => plugin.provider({
+const resourcePlugins = config.plugins.filter(plugin => plugin.type === 'resource').map(plugin => plugin.provider({
+  // TODO best way to stub this out?
+  // or pull from output?
   context: {
     projectDirectory: new URL(`file://${process.cwd()}`)
-  }
+  },
+  config: {
+    devServer: {}
+  },
+  graph: []
 }));
 
 async function getCustomLoaderResponse(url, body = '', checkOnly = false) {
@@ -68,11 +74,16 @@ export async function resolve(specifier, context, defaultResolve) {
 
 // https://nodejs.org/docs/latest-v18.x/api/esm.html#loadurl-context-nextload
 export async function load(source, context, defaultLoad) {
+  console.log('load', { source, context })
   const extension = source.split('.').pop();
-  const url = new URL(`${source}?type=${extension}`);
+  const attribute = source.importAttributes?.type || extension;
+  console.log({ attribute });
+  const url = new URL(`${source}?type=${attribute}`);
   const { shouldHandle } = await getCustomLoaderResponse(url, null, true);
 
-  if (shouldHandle) {
+  console.log('load.shuoldHandle', { shouldHandle });
+  // TODO revisit this condition / detection
+  if (shouldHandle && extension !== 'js') {
     const contents = await fs.readFile(url, 'utf-8');
     const { response } = await getCustomLoaderResponse(url, contents);
     const body = await response.text();
@@ -80,8 +91,8 @@ export async function load(source, context, defaultLoad) {
     // TODO better way to handle remove export default?  leverage import assertions instead
     // https://github.com/ProjectEvergreen/greenwood/issues/923
     return {
-      format: extension === 'json' ? 'json' : 'module',
-      source: extension === 'json' ? JSON.stringify(JSON.parse(contents.replace('export default ', ''))) : body,
+      format: 'module', // extension === 'json' ? 'json' : 'module',
+      source: body, // extension === 'json' ? JSON.stringify(JSON.parse(contents.replace('export default ', ''))) : body,
       shortCircuit: true
     };
   }
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
index d52c723..7461084 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-css.js
@@ -227,11 +227,36 @@ class StandardCssResource extends ResourceInterface {
     });
   }
 
+  // TODO how to best tell this was an import attribute specifically other then searchParams???
+  async shouldIntercept(url) {
+    // console.log('shouldIntercept', { url });
+    const { searchParams } = url;
+    
+    return url.protocol === 'file:'
+      && this.extensions.indexOf(url.pathname.split('.').pop()) >= 0
+      && searchParams.get('type') === 'css';
+  }
+
+  async intercept(url, request, response) {
+    // console.log('INTERCEPTING', { url, request });
+    const contents = await response.text();
+    const body = `const sheet = new CSSStyleSheet();sheet.replaceSync('${contents.replace(/\r?\n|\r/g, ' ').replace(/\\/g, '\\\\')}');export default sheet;`;
+
+    return new Response(body, {
+      headers: {
+        'Content-Type': this.contentType
+      }
+    });
+  }
+
+  // TODO how to best tell this was an import attribute specifically other then searchParams???
+  // can we even optimize inline styles?
   async shouldOptimize(url, response) {
-    const { protocol, pathname } = url;
+    const { protocol, pathname, searchParams } = url;
     const isValidCss = pathname.split('.').pop() === this.extensions[0]
       && protocol === 'file:'
-      && response.headers.get('Content-Type').indexOf(this.contentType) >= 0;
+      && response.headers.get('Content-Type').indexOf(this.contentType) >= 0
+      && searchParams.get('type') !== 'css';
 
     return this.compilation.config.optimization !== 'none' && isValidCss;
   }
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-json.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-json.js
index 726c9b5..4217aa6 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-json.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-json.js
@@ -40,6 +40,28 @@ class StandardJsonResource extends ResourceInterface {
       })
     });
   }
+
+  // TODO how to best tell this was an import attribute specifically other then searchParams???
+  async shouldIntercept(url) {
+    // console.log('shouldIntercept', { url });
+    const { searchParams } = url;
+    
+    return url.protocol === 'file:'
+      && this.extensions.indexOf(url.pathname.split('.').pop()) >= 0
+      && searchParams.get('type') === 'json';
+  }
+
+  async intercept(url, request, response) {
+    // console.log('INTERCEPTING', { url, request });
+    const json = await response.json();
+    const body = `export default ${JSON.stringify(json)}`;
+
+    return new Response(body, {
+      headers: {
+        'Content-Type': this.contentType
+      }
+    });
+  }
 }
 
 const pluginGreenwoodStandardJson = [{
